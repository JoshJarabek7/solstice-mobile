rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Base functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
      
      // Allow updating chats array for both users in a match
      allow update: if isAuthenticated() && 
        (isOwner(userId) || 
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['chats'])));
    }

    // Likes collection
    match /likes/{likeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.likerId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.likerId == request.auth.uid;
    }

    // Passes collection
    match /passes/{passId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.passerId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.passerId == request.auth.uid;
    }

    // Matches collection
    match /matches/{matchId} {
      allow read: if isAuthenticated() && 
        (resource.data.users.hasAny([request.auth.uid]));
      allow create: if isAuthenticated() && 
        request.resource.data.users.hasAny([request.auth.uid]);
    }

    // Chats collection
    match /chats/{chatId} {
      allow read: if isAuthenticated() && 
        (resource.data.participants.hasAny([request.auth.uid]));
      allow create: if isAuthenticated() && 
        request.resource.data.participants.hasAny([request.auth.uid]);
      allow update: if isAuthenticated() && 
        resource.data.participants.hasAny([request.auth.uid]);

      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        allow create: if isAuthenticated() && 
          get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
      }
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.toUserId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.fromUserId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.toUserId == request.auth.uid;
    }
  }
} 